

Microchip Technology PIC18 LITE Macro Assembler V1.44 build -154322312 
                                                                                               Fri Nov 03 17:57:49 2017

Microchip Technology Omniscient Code Generator v1.44 (Free mode) build 201709140600
     1                           	processor	18F25K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	text9,global,reloc=2,class=CODE,delta=1
    18                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    19                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    20  0000                     
    21                           ; Version 1.44
    22                           ; Generated 14/09/2017 GMT
    23                           ; 
    24                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    25                           ; All rights reserved.
    26                           ; 
    27                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    28                           ; 
    29                           ; Redistribution and use in source and binary forms, with or without modification, are
    30                           ; permitted provided that the following conditions are met:
    31                           ; 
    32                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    33                           ;        conditions and the following disclaimer.
    34                           ; 
    35                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    36                           ;        of conditions and the following disclaimer in the documentation and/or other
    37                           ;        materials provided with the distribution.
    38                           ; 
    39                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    40                           ;        software without specific prior written permission.
    41                           ; 
    42                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    43                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    44                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    45                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    46                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    47                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    48                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    49                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    50                           ; 
    51                           ; 
    52                           ; Code-generator required, PIC18F25K22 Definitions
    53                           ; 
    54                           ; SFR Addresses
    55  0000                     _ANSELA	set	3896
    56  0000                     _ANSELB	set	3897
    57  0000                     _ANSELC	set	3898
    58  0000                     _LATAbits	set	3977
    59  0000                     _LATBbits	set	3978
    60  0000                     _INTCON2bits	set	4081
    61  0000                     _WPUB	set	3937
    62  0000                     _TRISC	set	3988
    63  0000                     _TRISB	set	3987
    64  0000                     _TRISA	set	3986
    65  0000                     _LATC	set	3979
    66  0000                     _LATB	set	3978
    67  0000                     _LATA	set	3977
    68  0000                     _OSCTUNE	set	3995
    69  0000                     _OSCCON2	set	4050
    70  0000                     _OSCCON	set	4051
    71                           
    72                           	psect	smallconst
    73  000600                     __psmallconst:
    74                           	opt stack 0
    75  000600  00                 	db	0
    76  000601                     STR_1:
    77  000601  48                 	db	72	;'H'
    78  000602  65                 	db	101	;'e'
    79  000603  6C                 	db	108	;'l'
    80  000604  6C                 	db	108	;'l'
    81  000605  6F                 	db	111	;'o'
    82  000606  0A                 	db	10
    83  000607  00                 	db	0
    84                           
    85                           ; #config settings
    86  000608  00                 	db	0	; dummy byte at the end
    87  0000                     
    88                           	psect	cinit
    89  00088E                     __pcinit:
    90                           	opt stack 0
    91  00088E                     start_initialization:
    92                           	opt stack 0
    93  00088E                     __initialization:
    94                           	opt stack 0
    95  00088E                     end_of_initialization:
    96                           	opt stack 0
    97  00088E                     __end_of__initialization:
    98                           	opt stack 0
    99  00088E  0E00               	movlw	low (__Lsmallconst shr (0+16))
   100  000890  6EF8               	movwf	tblptru,c
   101  000892  0E06               	movlw	high __Lsmallconst
   102  000894  6EF7               	movwf	tblptrh,c
   103  000896  0100               	movlb	0
   104  000898  EFFB  F003         	goto	_main	;jump to C main() function
   105                           tblptru	equ	0xFF8
   106                           tblptrh	equ	0xFF7
   107                           
   108                           	psect	cstackCOMRAM
   109  000001                     __pcstackCOMRAM:
   110                           	opt stack 0
   111  000001                     sendCommand@command:
   112                           	opt stack 0
   113  000001                     sendChar@i:
   114                           	opt stack 0
   115                           
   116                           ; 2 bytes @ 0x0
   117  000001                     	ds	1
   118  000002                     sendCommand@pinout:
   119                           	opt stack 0
   120                           
   121                           ; 1 bytes @ 0x1
   122  000002                     	ds	1
   123  000003                     sendCommand@i:
   124                           	opt stack 0
   125  000003                     sendChar@i_207:
   126                           	opt stack 0
   127                           
   128                           ; 2 bytes @ 0x2
   129  000003                     	ds	2
   130  000005                     sendCommand@mask:
   131                           	opt stack 0
   132  000005                     sendChar@letter:
   133                           	opt stack 0
   134                           
   135                           ; 1 bytes @ 0x4
   136  000005                     	ds	1
   137  000006                     ??_lcd_init:
   138  000006                     sendChar@pinout:
   139                           	opt stack 0
   140                           
   141                           ; 1 bytes @ 0x5
   142  000006                     	ds	1
   143  000007                     sendChar@mask:
   144                           	opt stack 0
   145                           
   146                           ; 1 bytes @ 0x6
   147  000007                     	ds	1
   148  000008                     sendString@string:
   149                           	opt stack 0
   150                           
   151                           ; 2 bytes @ 0x7
   152  000008                     	ds	2
   153  00000A                     ??_sendString:
   154                           
   155                           ; 1 bytes @ 0x9
   156  00000A                     	ds	2
   157  00000C                     sendString@i:
   158                           	opt stack 0
   159                           
   160                           ; 2 bytes @ 0xB
   161  00000C                     	ds	2
   162  00000E                     ??_main:
   163                           
   164                           ; 1 bytes @ 0xD
   165  00000E                     	ds	2
   166  000010                     main@hi:
   167                           	opt stack 0
   168                           
   169                           ; 2 bytes @ 0xF
   170  000010                     	ds	2
   171                           tblptru	equ	0xFF8
   172                           tblptrh	equ	0xFF7
   173                           
   174 ;;
   175 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   176 ;;
   177 ;; *************** function _main *****************
   178 ;; Defined at:
   179 ;;		line 13 in file "newmain1.c"
   180 ;; Parameters:    Size  Location     Type
   181 ;;		None
   182 ;; Auto vars:     Size  Location     Type
   183 ;;  hi              2   15[COMRAM] PTR unsigned char 
   184 ;;		 -> STR_1(7), 
   185 ;; Return value:  Size  Location     Type
   186 ;;                  1    wreg      void 
   187 ;; Registers used:
   188 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   189 ;; Tracked objects:
   190 ;;		On entry : 0/0
   191 ;;		On exit  : 0/0
   192 ;;		Unchanged: 0/0
   193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   194 ;;      Params:         0       0       0       0       0       0       0
   195 ;;      Locals:         2       0       0       0       0       0       0
   196 ;;      Temps:          2       0       0       0       0       0       0
   197 ;;      Totals:         4       0       0       0       0       0       0
   198 ;;Total ram usage:        4 bytes
   199 ;; Hardware stack levels required when called:    3
   200 ;; This function calls:
   201 ;;		_SYSTEM_Initialize
   202 ;;		_lcd_init
   203 ;;		_sendString
   204 ;; This function is called by:
   205 ;;		Startup code after reset
   206 ;; This function uses a non-reentrant model
   207 ;;
   208                           
   209                           	psect	text0
   210  0007F6                     __ptext0:
   211                           	opt stack 0
   212  0007F6                     _main:
   213                           	opt stack 28
   214                           
   215                           ;newmain1.c: 14: SYSTEM_Initialize();
   216                           
   217                           ;incstack = 0
   218  0007F6  EC55  F004         	call	_SYSTEM_Initialize	;wreg free
   219                           
   220                           ;newmain1.c: 16: lcd_init();
   221  0007FA  EC05  F003         	call	_lcd_init	;wreg free
   222                           
   223                           ;newmain1.c: 17: _delay((unsigned long)((1000)*(16000000/4000.0)));
   224  0007FE  0E15               	movlw	21
   225  000800  6E0F               	movwf	(??_main+1)& (0+255),c
   226  000802  0E4B               	movlw	75
   227  000804  6E0E               	movwf	??_main& (0+255),c
   228  000806  0EBE               	movlw	190
   229  000808                     u127:
   230  000808  2EE8               	decfsz	wreg,f,c
   231  00080A  D7FE               	bra	u127
   232  00080C  2E0E               	decfsz	??_main& (0+255),f,c
   233  00080E  D7FC               	bra	u127
   234  000810  2E0F               	decfsz	(??_main+1)& (0+255),f,c
   235  000812  D7FA               	bra	u127
   236  000814  D000               	nop2	
   237                           
   238                           ;newmain1.c: 18: char* hi = "Hello\n";
   239  000816  0E01               	movlw	low STR_1
   240  000818  6E10               	movwf	main@hi,c
   241  00081A  0E06               	movlw	high STR_1
   242  00081C  6E11               	movwf	main@hi+1,c
   243                           
   244                           ;newmain1.c: 20: sendString(hi);
   245  00081E  C010  F008         	movff	main@hi,sendString@string
   246  000822  C011  F009         	movff	main@hi+1,sendString@string+1
   247  000826  ECB1  F003         	call	_sendString	;wreg free
   248  00082A                     l124:
   249  00082A  D7FF               	goto	l124
   250  00082C                     __end_of_main:
   251                           	opt stack 0
   252                           tblptru	equ	0xFF8
   253                           tblptrh	equ	0xFF7
   254                           wreg	equ	0xFE8
   255                           
   256 ;; *************** function _sendString *****************
   257 ;; Defined at:
   258 ;;		line 149 in file "lcd_new.c"
   259 ;; Parameters:    Size  Location     Type
   260 ;;  string          2    7[COMRAM] PTR unsigned char 
   261 ;;		 -> STR_1(7), 
   262 ;; Auto vars:     Size  Location     Type
   263 ;;  i               2   11[COMRAM] int 
   264 ;; Return value:  Size  Location     Type
   265 ;;                  1    wreg      void 
   266 ;; Registers used:
   267 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   268 ;; Tracked objects:
   269 ;;		On entry : 0/0
   270 ;;		On exit  : 0/0
   271 ;;		Unchanged: 0/0
   272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   273 ;;      Params:         2       0       0       0       0       0       0
   274 ;;      Locals:         2       0       0       0       0       0       0
   275 ;;      Temps:          2       0       0       0       0       0       0
   276 ;;      Totals:         6       0       0       0       0       0       0
   277 ;;Total ram usage:        6 bytes
   278 ;; Hardware stack levels used:    1
   279 ;; Hardware stack levels required when called:    2
   280 ;; This function calls:
   281 ;;		_sendChar
   282 ;; This function is called by:
   283 ;;		_main
   284 ;; This function uses a non-reentrant model
   285 ;;
   286                           
   287                           	psect	text1
   288  000762                     __ptext1:
   289                           	opt stack 0
   290  000762                     _sendString:
   291                           	opt stack 28
   292                           
   293                           ;lcd_new.c: 150: int i = 0;
   294                           
   295                           ;incstack = 0
   296  000762  0E00               	movlw	0
   297  000764  6E0D               	movwf	sendString@i+1,c
   298  000766  0E00               	movlw	0
   299  000768  6E0C               	movwf	sendString@i,c
   300                           
   301                           ;lcd_new.c: 151: while (string[i] != '\n') {
   302  00076A  D010               	goto	l108
   303  00076C                     
   304                           ;lcd_new.c: 152: sendChar(string[i]);
   305  00076C  500C               	movf	sendString@i,w,c
   306  00076E  2408               	addwf	sendString@string,w,c
   307  000770  6E0A               	movwf	??_sendString& (0+255),c
   308  000772  500D               	movf	sendString@i+1,w,c
   309  000774  2009               	addwfc	sendString@string+1,w,c
   310  000776  6E0B               	movwf	(??_sendString+1)& (0+255),c
   311  000778  C00A  FFF6         	movff	??_sendString,tblptrl
   312  00077C  C00B  FFF7         	movff	??_sendString+1,tblptrh
   313  000780                     	if	0	;tblptru may be non-zero
   314  000780                     	endif
   315  000780                     	if	0	;tblptru may be non-zero
   316  000780                     	endif
   317  000780  0008               	tblrd		*
   318  000782  50F5               	movf	tablat,w,c
   319  000784  EC65  F003         	call	_sendChar
   320                           
   321                           ;lcd_new.c: 153: i++;
   322  000788  4A0C               	infsnz	sendString@i,f,c
   323  00078A  2A0D               	incf	sendString@i+1,f,c
   324  00078C                     l108:
   325  00078C  500C               	movf	sendString@i,w,c
   326  00078E  2408               	addwf	sendString@string,w,c
   327  000790  6E0A               	movwf	??_sendString& (0+255),c
   328  000792  500D               	movf	sendString@i+1,w,c
   329  000794  2009               	addwfc	sendString@string+1,w,c
   330  000796  6E0B               	movwf	(??_sendString+1)& (0+255),c
   331  000798  C00A  FFF6         	movff	??_sendString,tblptrl
   332  00079C  C00B  FFF7         	movff	??_sendString+1,tblptrh
   333  0007A0                     	if	0	;tblptru may be non-zero
   334  0007A0                     	endif
   335  0007A0                     	if	0	;tblptru may be non-zero
   336  0007A0                     	endif
   337  0007A0  0008               	tblrd		*
   338  0007A2  50F5               	movf	tablat,w,c
   339  0007A4  0A0A               	xorlw	10
   340  0007A6  B4D8               	btfsc	status,2,c
   341  0007A8  0012               	return	
   342  0007AA  D7E0               	goto	l109
   343  0007AC                     __end_of_sendString:
   344                           	opt stack 0
   345                           tblptru	equ	0xFF8
   346                           tblptrh	equ	0xFF7
   347                           tblptrl	equ	0xFF6
   348                           tablat	equ	0xFF5
   349                           wreg	equ	0xFE8
   350                           status	equ	0xFD8
   351                           
   352 ;; *************** function _sendChar *****************
   353 ;; Defined at:
   354 ;;		line 88 in file "lcd_new.c"
   355 ;; Parameters:    Size  Location     Type
   356 ;;  letter          1    wreg     unsigned char 
   357 ;; Auto vars:     Size  Location     Type
   358 ;;  letter          1    4[COMRAM] unsigned char 
   359 ;;  i               2    2[COMRAM] int 
   360 ;;  i               2    0[COMRAM] int 
   361 ;;  mask            1    6[COMRAM] unsigned char 
   362 ;;  pinout          1    5[COMRAM] unsigned char 
   363 ;; Return value:  Size  Location     Type
   364 ;;                  1    wreg      void 
   365 ;; Registers used:
   366 ;;		wreg, status,2, status,0, cstack
   367 ;; Tracked objects:
   368 ;;		On entry : 0/0
   369 ;;		On exit  : 0/0
   370 ;;		Unchanged: 0/0
   371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   372 ;;      Params:         0       0       0       0       0       0       0
   373 ;;      Locals:         7       0       0       0       0       0       0
   374 ;;      Temps:          0       0       0       0       0       0       0
   375 ;;      Totals:         7       0       0       0       0       0       0
   376 ;;Total ram usage:        7 bytes
   377 ;; Hardware stack levels used:    1
   378 ;; Hardware stack levels required when called:    1
   379 ;; This function calls:
   380 ;;		_clockToggle
   381 ;;		_enableToggle
   382 ;; This function is called by:
   383 ;;		_sendString
   384 ;; This function uses a non-reentrant model
   385 ;;
   386                           
   387                           	psect	text2
   388  0006CA                     __ptext2:
   389                           	opt stack 0
   390  0006CA                     _sendChar:
   391                           	opt stack 28
   392                           
   393                           ;incstack = 0
   394                           ;sendChar@letter stored from wreg
   395  0006CA  6E05               	movwf	sendChar@letter,c
   396                           
   397                           ;lcd_new.c: 89: do { LATBbits.LATB5 = 1; } while(0);
   398  0006CC  8A8A               	bsf	3978,5,c	;volatile
   399                           
   400                           ;lcd_new.c: 90: clockToggle();
   401  0006CE  EC3B  F004         	call	_clockToggle	;wreg free
   402                           
   403                           ;lcd_new.c: 92: unsigned char mask = 128;
   404  0006D2  0E80               	movlw	128
   405  0006D4  6E07               	movwf	sendChar@mask,c
   406                           
   407                           ;lcd_new.c: 93: unsigned char pinout;
   408                           ;lcd_new.c: 95: for (int i = 0; i < 4; i++) {
   409  0006D6  0E00               	movlw	0
   410  0006D8  6E02               	movwf	sendChar@i+1,c
   411  0006DA  0E00               	movlw	0
   412  0006DC  6E01               	movwf	sendChar@i,c
   413  0006DE                     l797:
   414  0006DE  BE02               	btfsc	sendChar@i+1,7,c
   415  0006E0  D006               	goto	l87
   416  0006E2  5002               	movf	sendChar@i+1,w,c
   417  0006E4  E115               	bnz	l813
   418  0006E6  0E04               	movlw	4
   419  0006E8  5C01               	subwf	sendChar@i,w,c
   420  0006EA  B0D8               	btfsc	status,0,c
   421  0006EC  D011               	goto	u60
   422  0006EE                     l87:
   423                           
   424                           ;lcd_new.c: 96: pinout = mask & letter;
   425  0006EE  5007               	movf	sendChar@mask,w,c
   426  0006F0  1405               	andwf	sendChar@letter,w,c
   427  0006F2  6E06               	movwf	sendChar@pinout,c
   428                           
   429                           ;lcd_new.c: 97: if (pinout == 0) {
   430  0006F4  5006               	movf	sendChar@pinout,w,c
   431  0006F6  A4D8               	btfss	status,2,c
   432  0006F8  D002               	goto	l89
   433                           
   434                           ;lcd_new.c: 98: do { LATBbits.LATB5 = 0; } while(0);
   435  0006FA  9A8A               	bcf	3978,5,c	;volatile
   436                           
   437                           ;lcd_new.c: 99: } else {
   438  0006FC  D001               	goto	l94
   439  0006FE                     l89:
   440                           
   441                           ;lcd_new.c: 100: do { LATBbits.LATB5 = 1; } while(0);
   442  0006FE  8A8A               	bsf	3978,5,c	;volatile
   443  000700                     l94:
   444                           
   445                           ;lcd_new.c: 101: }
   446                           ;lcd_new.c: 102: clockToggle();
   447  000700  EC3B  F004         	call	_clockToggle	;wreg free
   448                           
   449                           ;lcd_new.c: 103: mask = mask >> 1;
   450  000704  90D8               	bcf	status,0,c
   451  000706  3007               	rrcf	sendChar@mask,w,c
   452  000708  6E07               	movwf	sendChar@mask,c
   453  00070A  4A01               	infsnz	sendChar@i,f,c
   454  00070C  2A02               	incf	sendChar@i+1,f,c
   455  00070E  D7E7               	goto	l797
   456  000710                     u60:
   457  000710                     l813:
   458                           
   459                           ;lcd_new.c: 104: }
   460                           ;lcd_new.c: 105: clockToggle();
   461  000710  EC3B  F004         	call	_clockToggle	;wreg free
   462                           
   463                           ;lcd_new.c: 106: enableToggle();
   464  000714  EC2B  F004         	call	_enableToggle	;wreg free
   465                           
   466                           ;lcd_new.c: 108: do { LATBbits.LATB5 = 1; } while(0);
   467  000718  8A8A               	bsf	3978,5,c	;volatile
   468                           
   469                           ;lcd_new.c: 109: clockToggle();
   470  00071A  EC3B  F004         	call	_clockToggle	;wreg free
   471                           
   472                           ;lcd_new.c: 111: for (int i = 0; i < 4; i++) {
   473  00071E  0E00               	movlw	0
   474  000720  6E04               	movwf	sendChar@i_207+1,c
   475  000722  0E00               	movlw	0
   476  000724  6E03               	movwf	sendChar@i_207,c
   477  000726                     l819:
   478  000726  BE04               	btfsc	sendChar@i_207+1,7,c
   479  000728  D006               	goto	l97
   480  00072A  5004               	movf	sendChar@i_207+1,w,c
   481  00072C  E115               	bnz	l835
   482  00072E  0E04               	movlw	4
   483  000730  5C03               	subwf	sendChar@i_207,w,c
   484  000732  B0D8               	btfsc	status,0,c
   485  000734  D011               	goto	u90
   486  000736                     l97:
   487                           
   488                           ;lcd_new.c: 112: pinout = mask & letter;
   489  000736  5007               	movf	sendChar@mask,w,c
   490  000738  1405               	andwf	sendChar@letter,w,c
   491  00073A  6E06               	movwf	sendChar@pinout,c
   492                           
   493                           ;lcd_new.c: 113: if (pinout == 0) {
   494  00073C  5006               	movf	sendChar@pinout,w,c
   495  00073E  A4D8               	btfss	status,2,c
   496  000740  D002               	goto	l99
   497                           
   498                           ;lcd_new.c: 114: do { LATBbits.LATB5 = 0; } while(0);
   499  000742  9A8A               	bcf	3978,5,c	;volatile
   500                           
   501                           ;lcd_new.c: 115: } else {
   502  000744  D001               	goto	l104
   503  000746                     l99:
   504                           
   505                           ;lcd_new.c: 116: do { LATBbits.LATB5 = 1; } while(0);
   506  000746  8A8A               	bsf	3978,5,c	;volatile
   507  000748                     l104:
   508                           
   509                           ;lcd_new.c: 117: }
   510                           ;lcd_new.c: 118: clockToggle();
   511  000748  EC3B  F004         	call	_clockToggle	;wreg free
   512                           
   513                           ;lcd_new.c: 119: mask = mask >> 1;
   514  00074C  90D8               	bcf	status,0,c
   515  00074E  3007               	rrcf	sendChar@mask,w,c
   516  000750  6E07               	movwf	sendChar@mask,c
   517  000752  4A03               	infsnz	sendChar@i_207,f,c
   518  000754  2A04               	incf	sendChar@i_207+1,f,c
   519  000756  D7E7               	goto	l819
   520  000758                     u90:
   521  000758                     l835:
   522                           
   523                           ;lcd_new.c: 120: }
   524                           ;lcd_new.c: 145: clockToggle();
   525  000758  EC3B  F004         	call	_clockToggle	;wreg free
   526                           
   527                           ;lcd_new.c: 146: enableToggle();
   528  00075C  EC2B  F004         	call	_enableToggle	;wreg free
   529  000760  0012               	return		;funcret
   530  000762                     __end_of_sendChar:
   531                           	opt stack 0
   532                           tblptru	equ	0xFF8
   533                           tblptrh	equ	0xFF7
   534                           tblptrl	equ	0xFF6
   535                           tablat	equ	0xFF5
   536                           wreg	equ	0xFE8
   537                           status	equ	0xFD8
   538                           
   539 ;; *************** function _lcd_init *****************
   540 ;; Defined at:
   541 ;;		line 51 in file "lcd_new.c"
   542 ;; Parameters:    Size  Location     Type
   543 ;;		None
   544 ;; Auto vars:     Size  Location     Type
   545 ;;		None
   546 ;; Return value:  Size  Location     Type
   547 ;;                  1    wreg      void 
   548 ;; Registers used:
   549 ;;		wreg, status,2, status,0, cstack
   550 ;; Tracked objects:
   551 ;;		On entry : 0/0
   552 ;;		On exit  : 0/0
   553 ;;		Unchanged: 0/0
   554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   555 ;;      Params:         0       0       0       0       0       0       0
   556 ;;      Locals:         0       0       0       0       0       0       0
   557 ;;      Temps:          1       0       0       0       0       0       0
   558 ;;      Totals:         1       0       0       0       0       0       0
   559 ;;Total ram usage:        1 bytes
   560 ;; Hardware stack levels used:    1
   561 ;; Hardware stack levels required when called:    2
   562 ;; This function calls:
   563 ;;		_sendCommand
   564 ;; This function is called by:
   565 ;;		_main
   566 ;; This function uses a non-reentrant model
   567 ;;
   568                           
   569                           	psect	text3
   570  00060A                     __ptext3:
   571                           	opt stack 0
   572  00060A                     _lcd_init:
   573                           	opt stack 28
   574                           
   575                           ;lcd_new.c: 52: _delay((unsigned long)((16)*(16000000/4000.0)));
   576                           
   577                           ;incstack = 0
   578  00060A  0E54               	movlw	84
   579  00060C  6E06               	movwf	??_lcd_init& (0+255),c
   580  00060E  0E1C               	movlw	28
   581  000610                     u137:
   582  000610  2EE8               	decfsz	wreg,f,c
   583  000612  D7FE               	bra	u137
   584  000614  2E06               	decfsz	??_lcd_init& (0+255),f,c
   585  000616  D7FC               	bra	u137
   586  000618  D000               	nop2	
   587                           
   588                           ;lcd_new.c: 53: sendCommand(0x03);
   589  00061A  0E03               	movlw	3
   590  00061C  ECD6  F003         	call	_sendCommand
   591                           
   592                           ;lcd_new.c: 54: _delay((unsigned long)((5)*(16000000/4000.0)));
   593  000620  0E1A               	movlw	26
   594  000622  6E06               	movwf	??_lcd_init& (0+255),c
   595  000624  0EF8               	movlw	248
   596  000626                     u147:
   597  000626  2EE8               	decfsz	wreg,f,c
   598  000628  D7FE               	bra	u147
   599  00062A  2E06               	decfsz	??_lcd_init& (0+255),f,c
   600  00062C  D7FC               	bra	u147
   601  00062E  D000               	nop2	
   602                           
   603                           ;lcd_new.c: 55: sendCommand(0x03);
   604  000630  0E03               	movlw	3
   605  000632  ECD6  F003         	call	_sendCommand
   606                           
   607                           ;lcd_new.c: 56: _delay((unsigned long)((150)*(16000000/4000000.0)));
   608  000636  0EC8               	movlw	200
   609  000638                     u157:
   610  000638  2EE8               	decfsz	wreg,f,c
   611  00063A  D7FE               	bra	u157
   612                           
   613                           ;lcd_new.c: 57: sendCommand(0x03);
   614  00063C  0E03               	movlw	3
   615  00063E  ECD6  F003         	call	_sendCommand
   616                           
   617                           ;lcd_new.c: 58: _delay((unsigned long)((150)*(16000000/4000000.0)));
   618  000642  0EC8               	movlw	200
   619  000644                     u167:
   620  000644  2EE8               	decfsz	wreg,f,c
   621  000646  D7FE               	bra	u167
   622                           
   623                           ;lcd_new.c: 59: sendCommand(0x02);
   624  000648  0E02               	movlw	2
   625  00064A  ECD6  F003         	call	_sendCommand
   626                           
   627                           ;lcd_new.c: 60: _delay((unsigned long)((150)*(16000000/4000000.0)));
   628  00064E  0EC8               	movlw	200
   629  000650                     u177:
   630  000650  2EE8               	decfsz	wreg,f,c
   631  000652  D7FE               	bra	u177
   632                           
   633                           ;lcd_new.c: 62: sendCommand(0x02);
   634  000654  0E02               	movlw	2
   635  000656  ECD6  F003         	call	_sendCommand
   636                           
   637                           ;lcd_new.c: 63: _delay((unsigned long)((150)*(16000000/4000000.0)));
   638  00065A  0EC8               	movlw	200
   639  00065C                     u187:
   640  00065C  2EE8               	decfsz	wreg,f,c
   641  00065E  D7FE               	bra	u187
   642                           
   643                           ;lcd_new.c: 64: sendCommand(0x08);
   644  000660  0E08               	movlw	8
   645  000662  ECD6  F003         	call	_sendCommand
   646                           
   647                           ;lcd_new.c: 65: _delay((unsigned long)((150)*(16000000/4000000.0)));
   648  000666  0EC8               	movlw	200
   649  000668                     u197:
   650  000668  2EE8               	decfsz	wreg,f,c
   651  00066A  D7FE               	bra	u197
   652                           
   653                           ;lcd_new.c: 67: sendCommand(0x00);
   654  00066C  0E00               	movlw	0
   655  00066E  ECD6  F003         	call	_sendCommand
   656                           
   657                           ;lcd_new.c: 68: _delay((unsigned long)((150)*(16000000/4000000.0)));
   658  000672  0EC8               	movlw	200
   659  000674                     u207:
   660  000674  2EE8               	decfsz	wreg,f,c
   661  000676  D7FE               	bra	u207
   662                           
   663                           ;lcd_new.c: 69: sendCommand(0x08);
   664  000678  0E08               	movlw	8
   665  00067A  ECD6  F003         	call	_sendCommand
   666                           
   667                           ;lcd_new.c: 70: _delay((unsigned long)((150)*(16000000/4000000.0)));
   668  00067E  0EC8               	movlw	200
   669  000680                     u217:
   670  000680  2EE8               	decfsz	wreg,f,c
   671  000682  D7FE               	bra	u217
   672                           
   673                           ;lcd_new.c: 72: sendCommand(0x00);
   674  000684  0E00               	movlw	0
   675  000686  ECD6  F003         	call	_sendCommand
   676                           
   677                           ;lcd_new.c: 73: _delay((unsigned long)((150)*(16000000/4000000.0)));
   678  00068A  0EC8               	movlw	200
   679  00068C                     u227:
   680  00068C  2EE8               	decfsz	wreg,f,c
   681  00068E  D7FE               	bra	u227
   682                           
   683                           ;lcd_new.c: 74: sendCommand(0x01);
   684  000690  0E01               	movlw	1
   685  000692  ECD6  F003         	call	_sendCommand
   686                           
   687                           ;lcd_new.c: 75: _delay((unsigned long)((17)*(16000000/4000000.0))); ;
   688  000696  0E16               	movlw	22
   689  000698                     u237:
   690  000698  2EE8               	decfsz	wreg,f,c
   691  00069A  D7FE               	bra	u237
   692  00069C  D000               	nop2	
   693                           
   694                           ;lcd_new.c: 77: sendCommand(0x00);
   695  00069E  0E00               	movlw	0
   696  0006A0  ECD6  F003         	call	_sendCommand
   697                           
   698                           ;lcd_new.c: 78: _delay((unsigned long)((150)*(16000000/4000000.0)));
   699  0006A4  0EC8               	movlw	200
   700  0006A6                     u247:
   701  0006A6  2EE8               	decfsz	wreg,f,c
   702  0006A8  D7FE               	bra	u247
   703                           
   704                           ;lcd_new.c: 79: sendCommand(0x06);
   705  0006AA  0E06               	movlw	6
   706  0006AC  ECD6  F003         	call	_sendCommand
   707                           
   708                           ;lcd_new.c: 80: _delay((unsigned long)((150)*(16000000/4000000.0)));
   709  0006B0  0EC8               	movlw	200
   710  0006B2                     u257:
   711  0006B2  2EE8               	decfsz	wreg,f,c
   712  0006B4  D7FE               	bra	u257
   713                           
   714                           ;lcd_new.c: 82: sendCommand(0x00);
   715  0006B6  0E00               	movlw	0
   716  0006B8  ECD6  F003         	call	_sendCommand
   717                           
   718                           ;lcd_new.c: 83: _delay((unsigned long)((150)*(16000000/4000000.0)));
   719  0006BC  0EC8               	movlw	200
   720  0006BE                     u267:
   721  0006BE  2EE8               	decfsz	wreg,f,c
   722  0006C0  D7FE               	bra	u267
   723                           
   724                           ;lcd_new.c: 84: sendCommand(0x0F);
   725  0006C2  0E0F               	movlw	15
   726  0006C4  ECD6  F003         	call	_sendCommand
   727  0006C8  0012               	return		;funcret
   728  0006CA                     __end_of_lcd_init:
   729                           	opt stack 0
   730                           tblptru	equ	0xFF8
   731                           tblptrh	equ	0xFF7
   732                           tblptrl	equ	0xFF6
   733                           tablat	equ	0xFF5
   734                           wreg	equ	0xFE8
   735                           status	equ	0xFD8
   736                           
   737 ;; *************** function _sendCommand *****************
   738 ;; Defined at:
   739 ;;		line 20 in file "lcd_new.c"
   740 ;; Parameters:    Size  Location     Type
   741 ;;  command         1    wreg     unsigned char 
   742 ;; Auto vars:     Size  Location     Type
   743 ;;  command         1    0[COMRAM] unsigned char 
   744 ;;  i               2    2[COMRAM] int 
   745 ;;  mask            1    4[COMRAM] unsigned char 
   746 ;;  pinout          1    1[COMRAM] unsigned char 
   747 ;; Return value:  Size  Location     Type
   748 ;;                  1    wreg      void 
   749 ;; Registers used:
   750 ;;		wreg, status,2, status,0, cstack
   751 ;; Tracked objects:
   752 ;;		On entry : 0/0
   753 ;;		On exit  : 0/0
   754 ;;		Unchanged: 0/0
   755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   756 ;;      Params:         0       0       0       0       0       0       0
   757 ;;      Locals:         5       0       0       0       0       0       0
   758 ;;      Temps:          0       0       0       0       0       0       0
   759 ;;      Totals:         5       0       0       0       0       0       0
   760 ;;Total ram usage:        5 bytes
   761 ;; Hardware stack levels used:    1
   762 ;; Hardware stack levels required when called:    1
   763 ;; This function calls:
   764 ;;		_clockToggle
   765 ;;		_enableToggle
   766 ;; This function is called by:
   767 ;;		_lcd_init
   768 ;; This function uses a non-reentrant model
   769 ;;
   770                           
   771                           	psect	text4
   772  0007AC                     __ptext4:
   773                           	opt stack 0
   774  0007AC                     _sendCommand:
   775                           	opt stack 28
   776                           
   777                           ;incstack = 0
   778                           ;sendCommand@command stored from wreg
   779  0007AC  6E01               	movwf	sendCommand@command,c
   780                           
   781                           ;lcd_new.c: 21: unsigned char mask = 16;
   782  0007AE  0E10               	movlw	16
   783  0007B0  6E05               	movwf	sendCommand@mask,c
   784                           
   785                           ;lcd_new.c: 22: unsigned char pinout;
   786                           ;lcd_new.c: 24: for (int i = 0; i < 5; i++) {
   787  0007B2  0E00               	movlw	0
   788  0007B4  6E04               	movwf	sendCommand@i+1,c
   789  0007B6  0E00               	movlw	0
   790  0007B8  6E03               	movwf	sendCommand@i,c
   791  0007BA                     l773:
   792  0007BA  BE04               	btfsc	sendCommand@i+1,7,c
   793  0007BC  D006               	goto	l71
   794  0007BE  5004               	movf	sendCommand@i+1,w,c
   795  0007C0  E115               	bnz	l789
   796  0007C2  0E05               	movlw	5
   797  0007C4  5C03               	subwf	sendCommand@i,w,c
   798  0007C6  B0D8               	btfsc	status,0,c
   799  0007C8  D011               	goto	u30
   800  0007CA                     l71:
   801                           
   802                           ;lcd_new.c: 25: pinout = command & mask;
   803  0007CA  5001               	movf	sendCommand@command,w,c
   804  0007CC  1405               	andwf	sendCommand@mask,w,c
   805  0007CE  6E02               	movwf	sendCommand@pinout,c
   806                           
   807                           ;lcd_new.c: 26: if (pinout == 0) {
   808  0007D0  5002               	movf	sendCommand@pinout,w,c
   809  0007D2  A4D8               	btfss	status,2,c
   810  0007D4  D002               	goto	l73
   811                           
   812                           ;lcd_new.c: 27: do { LATBbits.LATB5 = 0; } while(0);
   813  0007D6  9A8A               	bcf	3978,5,c	;volatile
   814                           
   815                           ;lcd_new.c: 28: } else {
   816  0007D8  D001               	goto	l78
   817  0007DA                     l73:
   818                           
   819                           ;lcd_new.c: 29: do { LATBbits.LATB5 = 1; } while(0);
   820  0007DA  8A8A               	bsf	3978,5,c	;volatile
   821  0007DC                     l78:
   822                           
   823                           ;lcd_new.c: 30: }
   824                           ;lcd_new.c: 31: clockToggle();
   825  0007DC  EC3B  F004         	call	_clockToggle	;wreg free
   826                           
   827                           ;lcd_new.c: 32: mask = mask >> 1;
   828  0007E0  90D8               	bcf	status,0,c
   829  0007E2  3005               	rrcf	sendCommand@mask,w,c
   830  0007E4  6E05               	movwf	sendCommand@mask,c
   831  0007E6  4A03               	infsnz	sendCommand@i,f,c
   832  0007E8  2A04               	incf	sendCommand@i+1,f,c
   833  0007EA  D7E7               	goto	l773
   834  0007EC                     u30:
   835  0007EC                     l789:
   836                           
   837                           ;lcd_new.c: 33: }
   838                           ;lcd_new.c: 35: clockToggle();
   839  0007EC  EC3B  F004         	call	_clockToggle	;wreg free
   840                           
   841                           ;lcd_new.c: 36: enableToggle();
   842  0007F0  EC2B  F004         	call	_enableToggle	;wreg free
   843  0007F4  0012               	return		;funcret
   844  0007F6                     __end_of_sendCommand:
   845                           	opt stack 0
   846                           tblptru	equ	0xFF8
   847                           tblptrh	equ	0xFF7
   848                           tblptrl	equ	0xFF6
   849                           tablat	equ	0xFF5
   850                           wreg	equ	0xFE8
   851                           status	equ	0xFD8
   852                           
   853 ;; *************** function _enableToggle *****************
   854 ;; Defined at:
   855 ;;		line 11 in file "lcd_new.c"
   856 ;; Parameters:    Size  Location     Type
   857 ;;		None
   858 ;; Auto vars:     Size  Location     Type
   859 ;;		None
   860 ;; Return value:  Size  Location     Type
   861 ;;                  1    wreg      void 
   862 ;; Registers used:
   863 ;;		wreg
   864 ;; Tracked objects:
   865 ;;		On entry : 0/0
   866 ;;		On exit  : 0/0
   867 ;;		Unchanged: 0/0
   868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   869 ;;      Params:         0       0       0       0       0       0       0
   870 ;;      Locals:         0       0       0       0       0       0       0
   871 ;;      Temps:          0       0       0       0       0       0       0
   872 ;;      Totals:         0       0       0       0       0       0       0
   873 ;;Total ram usage:        0 bytes
   874 ;; Hardware stack levels used:    1
   875 ;; This function calls:
   876 ;;		Nothing
   877 ;; This function is called by:
   878 ;;		_sendCommand
   879 ;;		_sendChar
   880 ;; This function uses a non-reentrant model
   881 ;;
   882                           
   883                           	psect	text5
   884  000856                     __ptext5:
   885                           	opt stack 0
   886  000856                     _enableToggle:
   887                           	opt stack 28
   888                           
   889                           ;incstack = 0
   890                           ;lcd_new.c: 12: do { LATBbits.LATB0 = 0; } while(0);
   891  000856  908A               	bcf	3978,0,c	;volatile
   892                           
   893                           ;lcd_new.c: 13: _delay((unsigned long)((100)*(16000000/4000000.0)));
   894  000858  0E85               	movlw	133
   895  00085A                     u277:
   896  00085A  2EE8               	decfsz	wreg,f,c
   897  00085C  D7FE               	bra	u277
   898  00085E  F000               	nop	
   899                           
   900                           ;lcd_new.c: 14: do { LATAbits.LATA1 = 1; } while(0);
   901  000860  8289               	bsf	3977,1,c	;volatile
   902                           
   903                           ;lcd_new.c: 15: _delay((unsigned long)((100)*(16000000/4000000.0)));
   904  000862  0E85               	movlw	133
   905  000864                     u287:
   906  000864  2EE8               	decfsz	wreg,f,c
   907  000866  D7FE               	bra	u287
   908  000868  F000               	nop	
   909                           
   910                           ;lcd_new.c: 16: do { LATAbits.LATA1 = 0; } while(0);
   911  00086A  9289               	bcf	3977,1,c	;volatile
   912                           
   913                           ;lcd_new.c: 17: _delay((unsigned long)((100)*(16000000/4000000.0)));
   914  00086C  0E85               	movlw	133
   915  00086E                     u297:
   916  00086E  2EE8               	decfsz	wreg,f,c
   917  000870  D7FE               	bra	u297
   918  000872  F000               	nop	
   919  000874  0012               	return		;funcret
   920  000876                     __end_of_enableToggle:
   921                           	opt stack 0
   922                           tblptru	equ	0xFF8
   923                           tblptrh	equ	0xFF7
   924                           tblptrl	equ	0xFF6
   925                           tablat	equ	0xFF5
   926                           wreg	equ	0xFE8
   927                           status	equ	0xFD8
   928                           
   929 ;; *************** function _clockToggle *****************
   930 ;; Defined at:
   931 ;;		line 3 in file "lcd_new.c"
   932 ;; Parameters:    Size  Location     Type
   933 ;;		None
   934 ;; Auto vars:     Size  Location     Type
   935 ;;		None
   936 ;; Return value:  Size  Location     Type
   937 ;;                  1    wreg      void 
   938 ;; Registers used:
   939 ;;		wreg
   940 ;; Tracked objects:
   941 ;;		On entry : 0/0
   942 ;;		On exit  : 0/0
   943 ;;		Unchanged: 0/0
   944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   945 ;;      Params:         0       0       0       0       0       0       0
   946 ;;      Locals:         0       0       0       0       0       0       0
   947 ;;      Temps:          0       0       0       0       0       0       0
   948 ;;      Totals:         0       0       0       0       0       0       0
   949 ;;Total ram usage:        0 bytes
   950 ;; Hardware stack levels used:    1
   951 ;; This function calls:
   952 ;;		Nothing
   953 ;; This function is called by:
   954 ;;		_sendCommand
   955 ;;		_sendChar
   956 ;; This function uses a non-reentrant model
   957 ;;
   958                           
   959                           	psect	text6
   960  000876                     __ptext6:
   961                           	opt stack 0
   962  000876                     _clockToggle:
   963                           	opt stack 28
   964                           
   965                           ;incstack = 0
   966                           ;lcd_new.c: 4: do { LATBbits.LATB0 = 0; } while(0);
   967  000876  908A               	bcf	3978,0,c	;volatile
   968                           
   969                           ;lcd_new.c: 5: _delay((unsigned long)((100)*(16000000/4000000.0)));
   970  000878  0E85               	movlw	133
   971  00087A                     u307:
   972  00087A  2EE8               	decfsz	wreg,f,c
   973  00087C  D7FE               	bra	u307
   974  00087E  F000               	nop	
   975                           
   976                           ;lcd_new.c: 6: do { LATBbits.LATB0 = 1; } while(0);
   977  000880  808A               	bsf	3978,0,c	;volatile
   978                           
   979                           ;lcd_new.c: 7: _delay((unsigned long)((100)*(16000000/4000000.0)));
   980  000882  0E85               	movlw	133
   981  000884                     u317:
   982  000884  2EE8               	decfsz	wreg,f,c
   983  000886  D7FE               	bra	u317
   984  000888  F000               	nop	
   985                           
   986                           ;lcd_new.c: 8: do { LATBbits.LATB0 = 0; } while(0);
   987  00088A  908A               	bcf	3978,0,c	;volatile
   988  00088C  0012               	return	
   989  00088E                     __end_of_clockToggle:
   990                           	opt stack 0
   991                           tblptru	equ	0xFF8
   992                           tblptrh	equ	0xFF7
   993                           tblptrl	equ	0xFF6
   994                           tablat	equ	0xFF5
   995                           wreg	equ	0xFE8
   996                           status	equ	0xFD8
   997                           
   998 ;; *************** function _SYSTEM_Initialize *****************
   999 ;; Defined at:
  1000 ;;		line 111 in file "mcc_generated_files/mcc.c"
  1001 ;; Parameters:    Size  Location     Type
  1002 ;;		None
  1003 ;; Auto vars:     Size  Location     Type
  1004 ;;		None
  1005 ;; Return value:  Size  Location     Type
  1006 ;;                  1    wreg      void 
  1007 ;; Registers used:
  1008 ;;		wreg, status,2, cstack
  1009 ;; Tracked objects:
  1010 ;;		On entry : 0/0
  1011 ;;		On exit  : 0/0
  1012 ;;		Unchanged: 0/0
  1013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1014 ;;      Params:         0       0       0       0       0       0       0
  1015 ;;      Locals:         0       0       0       0       0       0       0
  1016 ;;      Temps:          0       0       0       0       0       0       0
  1017 ;;      Totals:         0       0       0       0       0       0       0
  1018 ;;Total ram usage:        0 bytes
  1019 ;; Hardware stack levels used:    1
  1020 ;; Hardware stack levels required when called:    1
  1021 ;; This function calls:
  1022 ;;		_OSCILLATOR_Initialize
  1023 ;;		_PIN_MANAGER_Initialize
  1024 ;; This function is called by:
  1025 ;;		_main
  1026 ;; This function uses a non-reentrant model
  1027 ;;
  1028                           
  1029                           	psect	text7
  1030  0008AA                     __ptext7:
  1031                           	opt stack 0
  1032  0008AA                     _SYSTEM_Initialize:
  1033                           	opt stack 29
  1034                           
  1035                           ;mcc.c: 114: PIN_MANAGER_Initialize();
  1036                           
  1037                           ;incstack = 0
  1038  0008AA  EC16  F004         	call	_PIN_MANAGER_Initialize	;wreg free
  1039                           
  1040                           ;mcc.c: 115: OSCILLATOR_Initialize();
  1041  0008AE  EC4E  F004         	call	_OSCILLATOR_Initialize	;wreg free
  1042  0008B2  0012               	return		;funcret
  1043  0008B4                     __end_of_SYSTEM_Initialize:
  1044                           	opt stack 0
  1045                           tblptru	equ	0xFF8
  1046                           tblptrh	equ	0xFF7
  1047                           tblptrl	equ	0xFF6
  1048                           tablat	equ	0xFF5
  1049                           wreg	equ	0xFE8
  1050                           status	equ	0xFD8
  1051                           
  1052 ;; *************** function _PIN_MANAGER_Initialize *****************
  1053 ;; Defined at:
  1054 ;;		line 52 in file "mcc_generated_files/pin_manager.c"
  1055 ;; Parameters:    Size  Location     Type
  1056 ;;		None
  1057 ;; Auto vars:     Size  Location     Type
  1058 ;;		None
  1059 ;; Return value:  Size  Location     Type
  1060 ;;                  1    wreg      void 
  1061 ;; Registers used:
  1062 ;;		wreg, status,2
  1063 ;; Tracked objects:
  1064 ;;		On entry : 0/0
  1065 ;;		On exit  : 0/0
  1066 ;;		Unchanged: 0/0
  1067 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1068 ;;      Params:         0       0       0       0       0       0       0
  1069 ;;      Locals:         0       0       0       0       0       0       0
  1070 ;;      Temps:          0       0       0       0       0       0       0
  1071 ;;      Totals:         0       0       0       0       0       0       0
  1072 ;;Total ram usage:        0 bytes
  1073 ;; Hardware stack levels used:    1
  1074 ;; This function calls:
  1075 ;;		Nothing
  1076 ;; This function is called by:
  1077 ;;		_SYSTEM_Initialize
  1078 ;; This function uses a non-reentrant model
  1079 ;;
  1080                           
  1081                           	psect	text8
  1082  00082C                     __ptext8:
  1083                           	opt stack 0
  1084  00082C                     _PIN_MANAGER_Initialize:
  1085                           	opt stack 29
  1086                           
  1087                           ;pin_manager.c: 57: LATA = 0x00;
  1088                           
  1089                           ;incstack = 0
  1090  00082C  0E00               	movlw	0
  1091  00082E  6E89               	movwf	3977,c	;volatile
  1092                           
  1093                           ;pin_manager.c: 58: LATB = 0x00;
  1094  000830  0E00               	movlw	0
  1095  000832  6E8A               	movwf	3978,c	;volatile
  1096                           
  1097                           ;pin_manager.c: 59: LATC = 0x00;
  1098  000834  0E00               	movlw	0
  1099  000836  6E8B               	movwf	3979,c	;volatile
  1100                           
  1101                           ;pin_manager.c: 64: TRISA = 0xFD;
  1102  000838  0EFD               	movlw	253
  1103  00083A  6E92               	movwf	3986,c	;volatile
  1104                           
  1105                           ;pin_manager.c: 65: TRISB = 0xDE;
  1106  00083C  0EDE               	movlw	222
  1107  00083E  6E93               	movwf	3987,c	;volatile
  1108                           
  1109                           ;pin_manager.c: 66: TRISC = 0xFF;
  1110  000840  6894               	setf	3988,c	;volatile
  1111                           
  1112                           ;pin_manager.c: 71: ANSELC = 0xFC;
  1113  000842  0EFC               	movlw	252
  1114  000844  010F               	movlb	15	; () banked
  1115  000846  6F3A               	movwf	58,b	;volatile
  1116                           
  1117                           ;pin_manager.c: 72: ANSELB = 0x1E;
  1118  000848  0E1E               	movlw	30
  1119  00084A  6F39               	movwf	57,b	;volatile
  1120                           
  1121                           ;pin_manager.c: 73: ANSELA = 0x2D;
  1122  00084C  0E2D               	movlw	45
  1123  00084E  6F38               	movwf	56,b	;volatile
  1124                           
  1125                           ; BSR set to: 15
  1126                           ;pin_manager.c: 78: WPUB = 0xFF;
  1127  000850  6861               	setf	3937,c	;volatile
  1128                           
  1129                           ; BSR set to: 15
  1130                           ;pin_manager.c: 79: INTCON2bits.nRBPU = 0;
  1131  000852  9EF1               	bcf	intcon2,7,c	;volatile
  1132                           
  1133                           ; BSR set to: 15
  1134  000854  0012               	return		;funcret
  1135  000856                     __end_of_PIN_MANAGER_Initialize:
  1136                           	opt stack 0
  1137                           tblptru	equ	0xFF8
  1138                           tblptrh	equ	0xFF7
  1139                           tblptrl	equ	0xFF6
  1140                           tablat	equ	0xFF5
  1141                           intcon2	equ	0xFF1
  1142                           wreg	equ	0xFE8
  1143                           status	equ	0xFD8
  1144                           
  1145 ;; *************** function _OSCILLATOR_Initialize *****************
  1146 ;; Defined at:
  1147 ;;		line 118 in file "mcc_generated_files/mcc.c"
  1148 ;; Parameters:    Size  Location     Type
  1149 ;;		None
  1150 ;; Auto vars:     Size  Location     Type
  1151 ;;		None
  1152 ;; Return value:  Size  Location     Type
  1153 ;;                  1    wreg      void 
  1154 ;; Registers used:
  1155 ;;		wreg, status,2
  1156 ;; Tracked objects:
  1157 ;;		On entry : 0/0
  1158 ;;		On exit  : 0/0
  1159 ;;		Unchanged: 0/0
  1160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1161 ;;      Params:         0       0       0       0       0       0       0
  1162 ;;      Locals:         0       0       0       0       0       0       0
  1163 ;;      Temps:          0       0       0       0       0       0       0
  1164 ;;      Totals:         0       0       0       0       0       0       0
  1165 ;;Total ram usage:        0 bytes
  1166 ;; Hardware stack levels used:    1
  1167 ;; This function calls:
  1168 ;;		Nothing
  1169 ;; This function is called by:
  1170 ;;		_SYSTEM_Initialize
  1171 ;; This function uses a non-reentrant model
  1172 ;;
  1173                           
  1174                           	psect	text9
  1175  00089C                     __ptext9:
  1176                           	opt stack 0
  1177  00089C                     _OSCILLATOR_Initialize:
  1178                           	opt stack 29
  1179                           
  1180                           ;mcc.c: 121: OSCCON = 0x70;
  1181                           
  1182                           ; BSR set to: 15
  1183                           ;incstack = 0
  1184  00089C  0E70               	movlw	112
  1185  00089E  6ED3               	movwf	4051,c	;volatile
  1186                           
  1187                           ;mcc.c: 123: OSCCON2 = 0x04;
  1188  0008A0  0E04               	movlw	4
  1189  0008A2  6ED2               	movwf	4050,c	;volatile
  1190                           
  1191                           ;mcc.c: 125: OSCTUNE = 0x00;
  1192  0008A4  0E00               	movlw	0
  1193  0008A6  6E9B               	movwf	3995,c	;volatile
  1194  0008A8  0012               	return		;funcret
  1195  0008AA                     __end_of_OSCILLATOR_Initialize:
  1196                           	opt stack 0
  1197                           tblptru	equ	0xFF8
  1198                           tblptrh	equ	0xFF7
  1199                           tblptrl	equ	0xFF6
  1200                           tablat	equ	0xFF5
  1201                           intcon2	equ	0xFF1
  1202                           wreg	equ	0xFE8
  1203                           status	equ	0xFD8
  1204                           tblptru	equ	0xFF8
  1205                           tblptrh	equ	0xFF7
  1206                           tblptrl	equ	0xFF6
  1207                           tablat	equ	0xFF5
  1208                           intcon2	equ	0xFF1
  1209                           wreg	equ	0xFE8
  1210                           status	equ	0xFD8
  1211                           
  1212                           	psect	rparam
  1213  0000                     tblptru	equ	0xFF8
  1214                           tblptrh	equ	0xFF7
  1215                           tblptrl	equ	0xFF6
  1216                           tablat	equ	0xFF5
  1217                           intcon2	equ	0xFF1
  1218                           wreg	equ	0xFE8
  1219                           status	equ	0xFD8


Data Sizes:
    Strings     7
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     17      17
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    main@hi	PTR unsigned char  size(2) Largest target is 7
		 -> STR_1(CODE[7]), 

    sendString@string	PTR unsigned char  size(2) Largest target is 7
		 -> STR_1(CODE[7]), 


Critical Paths under _main in COMRAM

    _main->_sendString
    _sendString->_sendChar
    _lcd_init->_sendCommand

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0     459
                                             13 COMRAM     4     4      0
                  _SYSTEM_Initialize
                           _lcd_init
                         _sendString
 ---------------------------------------------------------------------------------
 (1) _sendString                                           6     4      2     346
                                              7 COMRAM     6     4      2
                           _sendChar
 ---------------------------------------------------------------------------------
 (2) _sendChar                                             7     7      0     180
                                              0 COMRAM     7     7      0
                        _clockToggle
                       _enableToggle
 ---------------------------------------------------------------------------------
 (1) _lcd_init                                             1     1      0      90
                                              5 COMRAM     1     1      0
                        _sendCommand
 ---------------------------------------------------------------------------------
 (2) _sendCommand                                          5     5      0      90
                                              0 COMRAM     5     5      0
                        _clockToggle
                       _enableToggle
 ---------------------------------------------------------------------------------
 (3) _enableToggle                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _clockToggle                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0       0
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SYSTEM_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
   _lcd_init
     _sendCommand
       _clockToggle
       _enableToggle
   _sendString
     _sendChar
       _clockToggle
       _enableToggle

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F     11      11       1       17.9%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
DATA                 0      0       0       4        0.0%
BITBANK0            A0      0       0       5        0.0%
BANK0               A0      0       0       6        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BIGRAM             5FF      0       0      17        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V1.44 build -154322312 
Symbol Table                                                                                   Fri Nov 03 17:57:49 2017

                             l71 07CA                               l73 07DA  
                             l78 07DC                               l94 0700  
                             l87 06EE                               l97 0736  
                             l89 06FE                               l99 0746  
                             u30 07EC                               u60 0710  
                             u90 0758                     __CFG_CP0$OFF 000000  
                   __CFG_CP1$OFF 000000                     __CFG_CP2$OFF 000000  
                   __CFG_CP3$OFF 000000                      __CFG_LVP$ON 000000  
                            l104 0748                              l108 078C  
                            l124 082A                              l109 076C  
                            l813 0710                              l835 0758  
                            l819 0726                              l773 07BA  
                            l789 07EC                              l797 06DE  
                   __CFG_CPB$OFF 000000                              u207 0674  
                            u127 0808                              u217 0680  
                            u137 0610                              u307 087A  
                            u227 068C                              u147 0626  
                            u317 0884                              u237 0698  
                            u157 0638                              u247 06A6  
                            u167 0644                              u257 06B2  
                            u177 0650                     __CFG_CPD$OFF 000000  
                            u267 06BE                              u187 065C  
                            u277 085A                              u197 0668  
                            u287 0864                              u297 086E  
                            wreg 000FE8                             STR_1 0601  
                           _LATA 000F89                             _LATB 000F8A  
                           _LATC 000F8B                             _WPUB 000F61  
                           _main 07F6                    __CFG_BORV$190 000000  
                           start 0002                    __CFG_IESO$OFF 000000  
                   ___param_bank 000000                sendCommand@pinout 0002  
 __size_of_OSCILLATOR_Initialize 000E    __end_of_OSCILLATOR_Initialize 08AA  
                          ?_main 0001                   __CFG_DEBUG$OFF 000000  
                          _TRISA 000F92                            _TRISB 000F93  
                          _TRISC 000F94                    __CFG_WRT0$OFF 000000  
                  __CFG_WRT1$OFF 000000                    __CFG_WRT2$OFF 000000  
                  __CFG_WRT3$OFF 000000                   __CFG_EBTR0$OFF 000000  
                 __CFG_FCMEN$OFF 000000                   __CFG_EBTR1$OFF 000000  
                 __CFG_EBTR2$OFF 000000                   __CFG_EBTR3$OFF 000000  
                  __CFG_WRTB$OFF 000000                    __CFG_WRTC$OFF 000000  
                  __CFG_WRTD$OFF 000000                   __CFG_EBTRB$OFF 000000  
             __CFG_MCLRE$EXTMCLR 000000                            tablat 000FF5  
                          status 000FD8                   __CFG_HFOFST$ON 000000  
             sendCommand@command 0001                   __CFG_PBADEN$ON 000000  
                __initialization 088E                     __end_of_main 082C  
                   ?_sendCommand 0001             __end_of_enableToggle 0876  
                         ??_main 000E                    __activetblptr 000001  
           __size_of_clockToggle 0018                           _ANSELA 000F38  
                         _ANSELB 000F39                           _ANSELC 000F3A  
                 __CFG_WDTEN$OFF 000000                           _OSCCON 000FD3  
                 __CFG_XINST$OFF 000000                 __end_of_lcd_init 06CA  
                 __CFG_STVREN$ON 000000                 __end_of_sendChar 0762  
                         main@hi 0010                     __mediumconst 0000  
                         tblptrh 000FF7                           tblptrl 000FF6  
                         tblptru 000FF8                    sendChar@i_207 0003  
              _SYSTEM_Initialize 08AA                       __accesstop 0060  
        __end_of__initialization 088E               ?_SYSTEM_Initialize 0001  
                  ___rparam_used 000001                  sendCommand@mask 0005  
                 __pcstackCOMRAM 0001              ??_SYSTEM_Initialize 0001  
      __end_of_SYSTEM_Initialize 08B4                  __CFG_PLLCFG$OFF 000000  
             __CFG_CCP2MX$PORTC1 000000            __size_of_enableToggle 0020  
             __CFG_CCP3MX$PORTB5 000000             __size_of_sendCommand 004A  
                        _OSCCON2 000FD2                          _OSCTUNE 000F9B  
                    sendString@i 000C                        ?_lcd_init 0001  
                   _enableToggle 0856                        ?_sendChar 0001  
                __CFG_PWRTEN$OFF 000000                          __Hparam 0000  
                        __Lparam 0000                     __psmallconst 0600  
                        __pcinit 088E                          __ramtop 0600  
                        __ptext0 07F6                          __ptext1 0762  
                        __ptext2 06CA                          __ptext3 060A  
                        __ptext4 07AC                          __ptext5 0856  
                        __ptext6 0876                          __ptext7 08AA  
                        __ptext8 082C                          __ptext9 089C  
          _OSCILLATOR_Initialize 089C         ??_PIN_MANAGER_Initialize 0001  
     __size_of_SYSTEM_Initialize 000A                       ??_lcd_init 0006  
           end_of_initialization 088E                       _sendString 0762  
                     ??_sendChar 0001                    ??_clockToggle 0001  
                 sendChar@letter 0005                   sendChar@pinout 0006  
         ?_OSCILLATOR_Initialize 0001              start_initialization 088E  
__size_of_PIN_MANAGER_Initialize 002A              __end_of_clockToggle 088E  
                    ?_sendString 0008                     sendChar@mask 0007  
              __size_of_lcd_init 00C0                     sendCommand@i 0003  
         _PIN_MANAGER_Initialize 082C                __size_of_sendChar 0098  
                  ??_sendCommand 0001                 __CFG_PRICLKEN$ON 000000  
            __size_of_sendString 004A                      __smallconst 0600  
                    _clockToggle 0876                         _LATAbits 000F89  
                       _LATBbits 000F8A                 __CFG_WDTPS$32768 000000  
            __end_of_sendCommand 07F6                      _INTCON2bits 000FF1  
                       __Hrparam 0000                         __Lrparam 0000  
                   __Lsmallconst 0600               __CFG_BOREN$SBORDIS 000000  
              __CFG_P2BMX$PORTB5 000000          ??_OSCILLATOR_Initialize 0001  
                      sendChar@i 0001                         _lcd_init 060A  
                   ??_sendString 000A                    __size_of_main 0036  
                       _sendChar 06CA                 sendString@string 0008  
                    _sendCommand 07AC               __end_of_sendString 07AC  
                  ?_enableToggle 0001          ?_PIN_MANAGER_Initialize 0001  
                   ?_clockToggle 0001                __CFG_T3CMX$PORTC0 000000  
 __end_of_PIN_MANAGER_Initialize 0856                   ??_enableToggle 0001  
              __CFG_FOSC$INTIO67 000000  
